#BlueJ class context
comment0.target=Assignment2Test_starter
comment1.params=obj
comment1.target=void\ show(java.lang.Object)
comment1.text=\r\n\ Prints\ obj\ to\ console\ if\ VERBOSE.\ \ This\ is\ easier\ to\ type\ than\ System.out.println\ and\ makes\ it\ easy\ to\ disable\ output.\ \r\n\ \r\n\ @param\ obj\r\n
comment10.params=
comment10.target=void\ numLit()
comment11.params=
comment11.target=void\ stringLit()
comment12.params=
comment12.target=void\ Z()
comment13.params=
comment13.target=void\ rand()
comment14.params=
comment14.target=void\ primary()
comment15.params=
comment15.target=void\ unary1()
comment16.params=
comment16.target=void\ unary2()
comment17.params=
comment17.target=void\ ident()
comment18.params=
comment18.target=void\ binary0()
comment19.params=
comment19.target=void\ binary1()
comment2.params=input
comment2.target=AST\ getAST(java.lang.String)
comment2.text=\ Constructs\ a\ scanner\ and\ parser\ for\ the\ given\ input\ string,\ scans\ and\ parses\ the\ input\ and\ returns\ and\ AST.\ \r\n\ \r\n\ @param\ input\ \ \ String\ representing\ program\ to\ be\ tested\r\n\ @return\ \ AST\ representing\ the\ program\r\n\ @throws\ PLCException\r\n
comment20.params=
comment20.target=void\ conditional0()
comment21.params=
comment21.target=void\ conditional1()
comment22.params=
comment22.target=void\ error0()
comment23.params=
comment23.target=void\ error1()
comment24.params=
comment24.target=void\ andPowerExpressions()
comment25.params=
comment25.target=void\ andParentheses()
comment26.params=
comment26.target=void\ andMismatchedParentheses()
comment27.params=
comment27.target=void\ andDeepParentheses()
comment28.params=
comment28.target=void\ andUnaryChain()
comment29.params=
comment29.target=void\ andAMixOfOperators()
comment3.params=e\ value
comment3.target=NumLitExpr\ checkNumLit(AST,\ int)
comment3.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ NumLitExpr\ with\ the\ indicated\ value.\ \ Returns\ the\ given\ AST\ cast\ to\ NumLitExpr.\r\n\ \r\n\ @param\ e\r\n\ @param\ value\r\n\ @return\r\n
comment30.params=
comment30.target=void\ andLogicalOperators()
comment31.params=
comment31.target=void\ andSomeSentence()
comment32.params=
comment32.target=void\ error2()
comment33.params=
comment33.target=void\ error3()
comment34.params=
comment34.target=void\ conditional2()
comment35.params=
comment35.target=void\ powerExpression1()
comment36.params=
comment36.target=void\ comparisonOperators()
comment37.params=
comment37.target=void\ powerExpression()
comment38.params=
comment38.target=void\ binary2()
comment39.params=
comment39.target=void\ binary3()
comment4.params=e\ value
comment4.target=StringLitExpr\ checkStringLit(AST,\ java.lang.String)
comment4.text=\r\n\ \ Checks\ that\ the\ given\ AST\ e\ has\ type\ StringLitExpr\ with\ the\ given\ String\ value.\ \ Returns\ the\ given\ AST\ cast\ to\ StringLitExpr.\r\n\ @param\ e\r\n\ @param\ name\r\n\ @return\r\n
comment40.params=
comment40.target=void\ binary4()
comment41.params=
comment41.target=void\ binary6()
comment42.params=
comment42.target=void\ binary7()
comment43.params=
comment43.target=void\ binary8()
comment44.params=
comment44.target=void\ binary9()
comment45.params=
comment45.target=void\ binary10()
comment46.params=
comment46.target=void\ binary11()
comment47.params=
comment47.target=void\ unary3()
comment48.params=
comment48.target=void\ primary1()
comment49.params=
comment49.target=void\ test1()
comment5.params=e\ op
comment5.target=UnaryExpr\ checkUnary(AST,\ IToken.Kind)
comment5.text=\r\n\ \ Checks\ that\ the\ given\ AST\ e\ has\ type\ UnaryExpr\ with\ the\ given\ operator.\ \ Returns\ the\ given\ AST\ cast\ to\ UnaryExpr.\r\n\ @param\ e\r\n\ @param\ op\ \ Kind\ of\ expected\ operator\r\n\ @return\r\n
comment6.params=e
comment6.target=ConditionalExpr\ checkConditional(AST)
comment6.text=\r\n\ \ Checks\ that\ the\ given\ AST\ e\ has\ type\ ConditionalExpr.\ \ Returns\ the\ given\ AST\ cast\ to\ ConditionalExpr.\r\n\ @param\ e\r\n\ @return\r\n
comment7.params=e\ expectedOp
comment7.target=BinaryExpr\ checkBinary(AST,\ IToken.Kind)
comment7.text=\r\n\ \ Checks\ that\ the\ given\ AST\ e\ has\ type\ BinaryExpr\ with\ the\ given\ operator.\ \ Returns\ the\ given\ AST\ cast\ to\ BinaryExpr.\r\n\ \ \r\n\ @param\ e\r\n\ @param\ op\ \ Kind\ of\ expected\ operator\r\n\ @return\r\n
comment8.params=e\ name
comment8.target=IdentExpr\ checkIdent(AST,\ java.lang.String)
comment8.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ IdentExpr\ with\ the\ given\ name.\ \ Returns\ the\ given\ AST\ cast\ to\ IdentExpr.\r\n\ @param\ e\r\n\ @param\ name\r\n\ @return\r\n
comment9.params=
comment9.target=void\ emptyProgram()
numComments=50
