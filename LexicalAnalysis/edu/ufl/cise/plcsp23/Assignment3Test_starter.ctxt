#BlueJ class context
comment0.target=Assignment3Test_starter
comment1.params=input
comment1.target=ast.AST\ getAST(java.lang.String)
comment1.text=\r\n\ Constructs\ a\ scanner\ and\ parser\ for\ the\ given\ input\ string,\ scans\ and\ parses\r\n\ the\ input\ and\ returns\ and\ AST.\r\n\r\n\ @param\ input\ String\ representing\ program\ to\ be\ tested\r\n\ @return\ AST\ representing\ the\ program\r\n\ @throws\ PLCException\r\n
comment10.params=
comment10.target=void\ test0()
comment11.params=
comment11.target=void\ test1()
comment12.params=
comment12.target=void\ test2()
comment13.params=
comment13.target=void\ test3()
comment14.params=
comment14.target=void\ test4()
comment15.params=
comment15.target=void\ test5()
comment16.params=
comment16.target=void\ test6()
comment17.params=
comment17.target=void\ test7()
comment18.params=
comment18.target=void\ test8()
comment19.params=
comment19.target=void\ test9()
comment2.params=e\ value
comment2.target=ast.NumLitExpr\ checkNumLit(ast.AST,\ int)
comment2.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ NumLitExpr\ with\ the\ indicated\ value.\r\n\ Returns\ the\ given\ AST\ cast\ to\ NumLitExpr.\r\n\r\n\ @param\ e\r\n\ @param\ value\r\n\ @return\r\n
comment20.params=
comment20.target=void\ test10()
comment21.params=
comment21.target=void\ test11()
comment22.params=
comment22.target=void\ test12()
comment23.params=
comment23.target=void\ test13()
comment24.params=
comment24.target=void\ test14()
comment25.params=
comment25.target=void\ test15()
comment26.params=
comment26.target=void\ test16()
comment27.params=
comment27.target=void\ test17()
comment28.params=
comment28.target=void\ test18()
comment29.params=
comment29.target=void\ test19()
comment3.params=e\ value
comment3.target=ast.StringLitExpr\ checkStringLit(ast.AST,\ java.lang.String)
comment3.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ StringLitExpr\ with\ the\ given\ String\r\n\ value.\ Returns\ the\ given\ AST\ cast\ to\ StringLitExpr.\r\n\ \r\n\ @param\ e\r\n\ @param\ name\r\n\ @return\r\n
comment30.params=
comment30.target=void\ test20()
comment31.params=
comment31.target=void\ test21()
comment32.params=
comment32.target=void\ test22()
comment33.params=
comment33.target=void\ test23()
comment34.params=
comment34.target=void\ test24()
comment35.params=
comment35.target=void\ test25()
comment36.params=
comment36.target=void\ test26()
comment37.params=
comment37.target=void\ test27()
comment38.params=
comment38.target=void\ test28()
comment39.params=
comment39.target=void\ test29()
comment4.params=e\ op
comment4.target=ast.UnaryExpr\ checkUnary(ast.AST,\ IToken.Kind)
comment4.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ UnaryExpr\ with\ the\ given\ operator.\r\n\ Returns\ the\ given\ AST\ cast\ to\ UnaryExpr.\r\n\ \r\n\ @param\ e\r\n\ @param\ op\ Kind\ of\ expected\ operator\r\n\ @return\r\n
comment40.params=
comment40.target=void\ test30()
comment41.params=
comment41.target=void\ test31()
comment42.params=
comment42.target=void\ test32()
comment43.params=
comment43.target=void\ test33()
comment44.params=
comment44.target=void\ test34()
comment45.params=
comment45.target=void\ test35()
comment46.params=
comment46.target=void\ test36()
comment47.params=
comment47.target=void\ test37()
comment48.params=
comment48.target=void\ test38()
comment49.params=
comment49.target=void\ test39()
comment5.params=e
comment5.target=ast.ConditionalExpr\ checkConditional(ast.AST)
comment5.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ ConditionalExpr.\ Returns\ the\ given\ AST\r\n\ cast\ to\ ConditionalExpr.\r\n\ \r\n\ @param\ e\r\n\ @return\r\n
comment50.params=
comment50.target=void\ test40()
comment51.params=
comment51.target=void\ test41()
comment52.params=
comment52.target=void\ test42()
comment53.params=
comment53.target=void\ test43()
comment54.params=
comment54.target=void\ testAssignment3()
comment6.params=e\ expectedOp
comment6.target=ast.BinaryExpr\ checkBinary(ast.AST,\ IToken.Kind)
comment6.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ BinaryExpr\ with\ the\ given\ operator.\r\n\ Returns\ the\ given\ AST\ cast\ to\ BinaryExpr.\r\n\r\n\ @param\ e\r\n\ @param\ op\ Kind\ of\ expected\ operator\r\n\ @return\r\n
comment7.params=e\ name
comment7.target=ast.IdentExpr\ checkIdentExpr(ast.AST,\ java.lang.String)
comment7.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ IdentExpr\ with\ the\ given\ name.\ Returns\r\n\ the\ given\ AST\ cast\ to\ IdentExpr.\r\n\ \r\n\ @param\ e\r\n\ @param\ name\r\n\ @return\r\n
comment8.params=e\ name
comment8.target=ast.Ident\ checkIdent(ast.AST,\ java.lang.String)
comment8.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ Ident\ with\ the\ given\ name.\ Returns\ the\r\n\ given\ AST\ cast\ to\ IdentExpr.\r\n\ \r\n\ @param\ e\r\n\ @param\ name\r\n\ @return\r\n
comment9.params=d\ name\ type
comment9.target=ast.NameDef\ checkNameDef(ast.AST,\ java.lang.String,\ ast.Type)
numComments=55
