#BlueJ class context
comment0.target=Assignment3Test_starter
comment1.params=input
comment1.target=ast.AST\ getAST(java.lang.String)
comment1.text=\r\n\ Constructs\ a\ scanner\ and\ parser\ for\ the\ given\ input\ string,\ scans\ and\ parses\r\n\ the\ input\ and\ returns\ and\ AST.\r\n\r\n\ @param\ input\ String\ representing\ program\ to\ be\ tested\r\n\ @return\ AST\ representing\ the\ program\r\n\ @throws\ PLCException\r\n
comment10.params=
comment10.target=void\ test00()
comment11.params=
comment11.target=void\ test01()
comment12.params=
comment12.target=void\ test02()
comment13.params=
comment13.target=void\ test03()
comment14.params=
comment14.target=void\ test04()
comment15.params=
comment15.target=void\ test05()
comment16.params=
comment16.target=void\ test06()
comment17.params=
comment17.target=void\ testAssignment3()
comment2.params=e\ value
comment2.target=ast.NumLitExpr\ checkNumLit(ast.AST,\ int)
comment2.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ NumLitExpr\ with\ the\ indicated\ value.\r\n\ Returns\ the\ given\ AST\ cast\ to\ NumLitExpr.\r\n\r\n\ @param\ e\r\n\ @param\ value\r\n\ @return\r\n
comment3.params=e\ value
comment3.target=ast.StringLitExpr\ checkStringLit(ast.AST,\ java.lang.String)
comment3.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ StringLitExpr\ with\ the\ given\ String\r\n\ value.\ Returns\ the\ given\ AST\ cast\ to\ StringLitExpr.\r\n\ \r\n\ @param\ e\r\n\ @param\ name\r\n\ @return\r\n
comment4.params=e\ op
comment4.target=ast.UnaryExpr\ checkUnary(ast.AST,\ IToken.Kind)
comment4.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ UnaryExpr\ with\ the\ given\ operator.\r\n\ Returns\ the\ given\ AST\ cast\ to\ UnaryExpr.\r\n\ \r\n\ @param\ e\r\n\ @param\ op\ Kind\ of\ expected\ operator\r\n\ @return\r\n
comment5.params=e
comment5.target=ast.ConditionalExpr\ checkConditional(ast.AST)
comment5.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ ConditionalExpr.\ Returns\ the\ given\ AST\r\n\ cast\ to\ ConditionalExpr.\r\n\ \r\n\ @param\ e\r\n\ @return\r\n
comment6.params=e\ expectedOp
comment6.target=ast.BinaryExpr\ checkBinary(ast.AST,\ IToken.Kind)
comment6.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ BinaryExpr\ with\ the\ given\ operator.\r\n\ Returns\ the\ given\ AST\ cast\ to\ BinaryExpr.\r\n\r\n\ @param\ e\r\n\ @param\ op\ Kind\ of\ expected\ operator\r\n\ @return\r\n
comment7.params=e\ name
comment7.target=ast.IdentExpr\ checkIdentExpr(ast.AST,\ java.lang.String)
comment7.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ IdentExpr\ with\ the\ given\ name.\ Returns\r\n\ the\ given\ AST\ cast\ to\ IdentExpr.\r\n\ \r\n\ @param\ e\r\n\ @param\ name\r\n\ @return\r\n
comment8.params=e\ name
comment8.target=ast.Ident\ checkIdent(ast.AST,\ java.lang.String)
comment8.text=\r\n\ Checks\ that\ the\ given\ AST\ e\ has\ type\ Ident\ with\ the\ given\ name.\ Returns\ the\r\n\ given\ AST\ cast\ to\ IdentExpr.\r\n\ \r\n\ @param\ e\r\n\ @param\ name\r\n\ @return\r\n
comment9.params=d\ name\ type
comment9.target=ast.NameDef\ checkNameDef(ast.AST,\ java.lang.String,\ ast.Type)
numComments=18
